// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "../";

const ArgChainOwner = "oi";
const ArgFeeColor = "fc";
const ArgHname = "hn";
const ArgMaxBlobSize = "bs";
const ArgMaxEventSize = "es";
const ArgMaxEventsPerReq = "ne";
const ArgOwnerFee = "of";
const ArgStateControllerAddress = "S";
const ArgValidatorFee = "vf";

const ResAllowedStateControllerAddresses = "a";
const ResChainID = "c";
const ResChainOwnerID = "o";
const ResDefaultOwnerFee = "do";
const ResDefaultValidatorFee = "dv";
const ResDescription = "d";
const ResFeeColor = "f";
const ResMaxBlobSize = "mb";
const ResMaxEventSize = "me";
const ResMaxEventsPerReq = "mr";
const ResOwnerFee = "of";
const ResValidatorFee = "vf";

///////////////////////////// addAllowedStateControllerAddress /////////////////////////////

export class AddAllowedStateControllerAddressFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public chainOwner(v: wasmclient.AgentID): void {
        this.args.set(ArgChainOwner, this.args.fromAgentID(v));
    }

    public feeColor(v: wasmclient.Color): void {
        this.args.set(ArgFeeColor, this.args.fromColor(v));
    }

    public stateControllerAddress(v: wasmclient.Address): void {
        this.args.set(ArgStateControllerAddress, this.args.fromAddress(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        this.args.mandatory(ArgChainOwner);
        this.args.mandatory(ArgStateControllerAddress);
        return await super.post(0x9469d567, this.args);
    }
}

///////////////////////////// claimChainOwnership /////////////////////////////

export class ClaimChainOwnershipFunc extends wasmclient.ClientFunc {
    public async post(): Promise<wasmclient.RequestID> {
        return await super.post(0x03ff0fc0, null);
    }
}

///////////////////////////// delegateChainOwnership /////////////////////////////

export class DelegateChainOwnershipFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public chainOwner(v: wasmclient.AgentID): void {
        this.args.set(ArgChainOwner, this.args.fromAgentID(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        this.args.mandatory(ArgChainOwner);
        return await super.post(0x93ecb6ad, this.args);
    }
}

///////////////////////////// removeAllowedStateControllerAddress /////////////////////////////

export class RemoveAllowedStateControllerAddressFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public stateControllerAddress(v: wasmclient.Address): void {
        this.args.set(ArgStateControllerAddress, this.args.fromAddress(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        this.args.mandatory(ArgStateControllerAddress);
        return await super.post(0x31f69447, this.args);
    }
}

///////////////////////////// rotateStateController /////////////////////////////

export class RotateStateControllerFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public stateControllerAddress(v: wasmclient.Address): void {
        this.args.set(ArgStateControllerAddress, this.args.fromAddress(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        this.args.mandatory(ArgStateControllerAddress);
        return await super.post(0x244d1038, this.args);
    }
}

///////////////////////////// setChainInfo /////////////////////////////

export class SetChainInfoFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public maxBlobSize(v: wasmclient.Int32): void {
        this.args.set(ArgMaxBlobSize, this.args.fromInt32(v));
    }

    public maxEventSize(v: wasmclient.Int16): void {
        this.args.set(ArgMaxEventSize, this.args.fromInt16(v));
    }

    public maxEventsPerReq(v: wasmclient.Int16): void {
        this.args.set(ArgMaxEventsPerReq, this.args.fromInt16(v));
    }

    public ownerFee(v: wasmclient.Int64): void {
        this.args.set(ArgOwnerFee, this.args.fromInt64(v));
    }

    public validatorFee(v: wasmclient.Int64): void {
        this.args.set(ArgValidatorFee, this.args.fromInt64(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        return await super.post(0x702f5d2b, this.args);
    }
}

///////////////////////////// setContractFee /////////////////////////////

export class SetContractFeeFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public hname(v: wasmclient.Hname): void {
        this.args.set(ArgHname, this.args.fromHname(v));
    }

    public ownerFee(v: wasmclient.Int64): void {
        this.args.set(ArgOwnerFee, this.args.fromInt64(v));
    }

    public validatorFee(v: wasmclient.Int64): void {
        this.args.set(ArgValidatorFee, this.args.fromInt64(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        this.args.mandatory(ArgHname);
        return await super.post(0x8421a42b, this.args);
    }
}

///////////////////////////// setDefaultFee /////////////////////////////

export class SetDefaultFeeFunc extends wasmclient.ClientFunc {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public ownerFee(v: wasmclient.Int64): void {
        this.args.set(ArgOwnerFee, this.args.fromInt64(v));
    }

    public validatorFee(v: wasmclient.Int64): void {
        this.args.set(ArgValidatorFee, this.args.fromInt64(v));
    }

    public async post(): Promise<wasmclient.RequestID> {
        return await super.post(0x3310ecd0, this.args);
    }
}

///////////////////////////// getAllowedStateControllerAddresses /////////////////////////////

export class GetAllowedStateControllerAddressesView extends wasmclient.ClientView {
    public async call(): Promise<GetAllowedStateControllerAddressesResults> {
        const res = new GetAllowedStateControllerAddressesResults();
        await this.callView("getAllowedStateControllerAddresses", null, res);
        return res;
    }
}

export class GetAllowedStateControllerAddressesResults extends wasmclient.Results {
    allowedStateControllerAddresses(): wasmclient.Bytes {
        return this.toBytes(this.get(ResAllowedStateControllerAddresses));
    }
}

///////////////////////////// getChainInfo /////////////////////////////

export class GetChainInfoView extends wasmclient.ClientView {
    public async call(): Promise<GetChainInfoResults> {
        const res = new GetChainInfoResults();
        await this.callView("getChainInfo", null, res);
        return res;
    }
}

export class GetChainInfoResults extends wasmclient.Results {
    chainID(): wasmclient.ChainID {
        return this.toChainID(this.get(ResChainID));
    }

    chainOwnerID(): wasmclient.AgentID {
        return this.toAgentID(this.get(ResChainOwnerID));
    }

    defaultOwnerFee(): wasmclient.Int64 {
        return this.toInt64(this.get(ResDefaultOwnerFee));
    }

    defaultValidatorFee(): wasmclient.Int64 {
        return this.toInt64(this.get(ResDefaultValidatorFee));
    }

    description(): string {
        return this.toString(this.get(ResDescription));
    }

    feeColor(): wasmclient.Color {
        return this.toColor(this.get(ResFeeColor));
    }

    maxBlobSize(): wasmclient.Int32 {
        return this.toInt32(this.get(ResMaxBlobSize));
    }

    maxEventSize(): wasmclient.Int16 {
        return this.toInt16(this.get(ResMaxEventSize));
    }

    maxEventsPerReq(): wasmclient.Int16 {
        return this.toInt16(this.get(ResMaxEventsPerReq));
    }
}

///////////////////////////// getFeeInfo /////////////////////////////

export class GetFeeInfoView extends wasmclient.ClientView {
    private args: wasmclient.Arguments = new wasmclient.Arguments();

    public hname(v: wasmclient.Hname): void {
        this.args.set(ArgHname, this.args.fromHname(v));
    }

    public async call(): Promise<GetFeeInfoResults> {
        this.args.mandatory(ArgHname);
        const res = new GetFeeInfoResults();
        await this.callView("getFeeInfo", this.args, res);
        return res;
    }
}

export class GetFeeInfoResults extends wasmclient.Results {
    feeColor(): wasmclient.Color {
        return this.toColor(this.get(ResFeeColor));
    }

    ownerFee(): wasmclient.Int64 {
        return this.toInt64(this.get(ResOwnerFee));
    }

    validatorFee(): wasmclient.Int64 {
        return this.toInt64(this.get(ResValidatorFee));
    }
}

///////////////////////////// getMaxBlobSize /////////////////////////////

export class GetMaxBlobSizeView extends wasmclient.ClientView {
    public async call(): Promise<GetMaxBlobSizeResults> {
        const res = new GetMaxBlobSizeResults();
        await this.callView("getMaxBlobSize", null, res);
        return res;
    }
}

export class GetMaxBlobSizeResults extends wasmclient.Results {
    maxBlobSize(): wasmclient.Int32 {
        return this.toInt32(this.get(ResMaxBlobSize));
    }
}

///////////////////////////// CoreGovernanceService /////////////////////////////

export class CoreGovernanceService extends wasmclient.Service {
    public constructor(cl: wasmclient.ServiceClient) {
        super(cl, 0x17cf909f);
    }

    public addAllowedStateControllerAddress(): AddAllowedStateControllerAddressFunc {
        return new AddAllowedStateControllerAddressFunc(this);
    }

    public claimChainOwnership(): ClaimChainOwnershipFunc {
        return new ClaimChainOwnershipFunc(this);
    }

    public delegateChainOwnership(): DelegateChainOwnershipFunc {
        return new DelegateChainOwnershipFunc(this);
    }

    public removeAllowedStateControllerAddress(): RemoveAllowedStateControllerAddressFunc {
        return new RemoveAllowedStateControllerAddressFunc(this);
    }

    public rotateStateController(): RotateStateControllerFunc {
        return new RotateStateControllerFunc(this);
    }

    public setChainInfo(): SetChainInfoFunc {
        return new SetChainInfoFunc(this);
    }

    public setContractFee(): SetContractFeeFunc {
        return new SetContractFeeFunc(this);
    }

    public setDefaultFee(): SetDefaultFeeFunc {
        return new SetDefaultFeeFunc(this);
    }

    public getAllowedStateControllerAddresses(): GetAllowedStateControllerAddressesView {
        return new GetAllowedStateControllerAddressesView(this);
    }

    public getChainInfo(): GetChainInfoView {
        return new GetChainInfoView(this);
    }

    public getFeeInfo(): GetFeeInfoView {
        return new GetFeeInfoView(this);
    }

    public getMaxBlobSize(): GetMaxBlobSizeView {
        return new GetMaxBlobSizeView(this);
    }
}
