// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmclient from "./wasmclient";

const doodleHandlers = new Map<string, (evt: DoodleEvents, msg: string[]) => void>([
    ["doodle.gameEnded", (evt: DoodleEvents, msg: string[]) => evt.gameEnded(new EventGameEnded(msg))],
    ["doodle.gameStarted", (evt: DoodleEvents, msg: string[]) => evt.gameStarted(new EventGameStarted(msg))],
    ["doodle.playerJoinsNextBigBlind", (evt: DoodleEvents, msg: string[]) => evt.playerJoinsNextBigBlind(new EventPlayerJoinsNextBigBlind(msg))],
    ["doodle.playerJoinsNextHand", (evt: DoodleEvents, msg: string[]) => evt.playerJoinsNextHand(new EventPlayerJoinsNextHand(msg))],
    ["doodle.playerLeft", (evt: DoodleEvents, msg: string[]) => evt.playerLeft(new EventPlayerLeft(msg))],
    ["doodle.playerWinsAllPots", (evt: DoodleEvents, msg: string[]) => evt.playerWinsAllPots(new EventPlayerWinsAllPots(msg))],
]);

export class DoodleEvents implements wasmclient.IEventHandler {
    /* eslint-disable @typescript-eslint/no-empty-function */
    gameEnded: (evt: EventGameEnded) => void = () => {};
    gameStarted: (evt: EventGameStarted) => void = () => {};
    playerJoinsNextBigBlind: (evt: EventPlayerJoinsNextBigBlind) => void = () => {};
    playerJoinsNextHand: (evt: EventPlayerJoinsNextHand) => void = () => {};
    playerLeft: (evt: EventPlayerLeft) => void = () => {};
    playerWinsAllPots: (evt: EventPlayerWinsAllPots) => void = () => {};
    /* eslint-enable @typescript-eslint/no-empty-function */

    public callHandler(topic: string, params: string[]): void {
        const handler = doodleHandlers.get(topic);
        if (handler) {
            handler(this, params);
        }
    }

    public onDoodleGameEnded(handler: (evt: EventGameEnded) => void): void {
        this.gameEnded = handler;
    }

    public onDoodleGameStarted(handler: (evt: EventGameStarted) => void): void {
        this.gameStarted = handler;
    }

    public onDoodlePlayerJoinsNextBigBlind(handler: (evt: EventPlayerJoinsNextBigBlind) => void): void {
        this.playerJoinsNextBigBlind = handler;
    }

    public onDoodlePlayerJoinsNextHand(handler: (evt: EventPlayerJoinsNextHand) => void): void {
        this.playerJoinsNextHand = handler;
    }

    public onDoodlePlayerLeft(handler: (evt: EventPlayerLeft) => void): void {
        this.playerLeft = handler;
    }

    public onDoodlePlayerWinsAllPots(handler: (evt: EventPlayerWinsAllPots) => void): void {
        this.playerWinsAllPots = handler;
    }
}

export class EventGameEnded extends wasmclient.Event {
    public readonly tableNumber: wasmclient.Uint32;

    public constructor(msg: string[]) {
        super(msg);
        this.tableNumber = this.nextUint32();
    }
}

export class EventGameStarted extends wasmclient.Event {
    public readonly paidBigBlindTableSeatNumber: wasmclient.Uint16;
    public readonly paidSmallBlindTableSeatNumber: wasmclient.Uint16;
    public readonly tableNumber: wasmclient.Uint32;

    public constructor(msg: string[]) {
        super(msg);
        this.paidBigBlindTableSeatNumber = this.nextUint16();
        this.paidSmallBlindTableSeatNumber = this.nextUint16();
        this.tableNumber = this.nextUint32();
    }
}

export class EventPlayerJoinsNextBigBlind extends wasmclient.Event {
    public readonly playerAgentId: wasmclient.AgentID;
    public readonly playersInitialChipCount: wasmclient.Uint64;
    public readonly tableNumber: wasmclient.Uint32;
    public readonly tableSeatNumber: wasmclient.Uint16;

    public constructor(msg: string[]) {
        super(msg);
        this.playerAgentId = this.nextAgentID();
        this.playersInitialChipCount = this.nextUint64();
        this.tableNumber = this.nextUint32();
        this.tableSeatNumber = this.nextUint16();
    }
}

export class EventPlayerJoinsNextHand extends wasmclient.Event {
    public readonly playerAgentId: wasmclient.AgentID;
    public readonly playersInitialChipCount: wasmclient.Uint64;
    public readonly tableNumber: wasmclient.Uint32;
    public readonly tableSeatNumber: wasmclient.Uint16;

    public constructor(msg: string[]) {
        super(msg);
        this.playerAgentId = this.nextAgentID();
        this.playersInitialChipCount = this.nextUint64();
        this.tableNumber = this.nextUint32();
        this.tableSeatNumber = this.nextUint16();
    }
}

export class EventPlayerLeft extends wasmclient.Event {
    public readonly tableNumber: wasmclient.Uint32;
    public readonly tableSeatNumber: wasmclient.Uint16;

    public constructor(msg: string[]) {
        super(msg);
        this.tableNumber = this.nextUint32();
        this.tableSeatNumber = this.nextUint16();
    }
}

export class EventPlayerWinsAllPots extends wasmclient.Event {
    public readonly tableNumber: wasmclient.Uint32;
    public readonly tableSeatNumber: wasmclient.Uint16;
    public readonly totalPotSize: wasmclient.Uint64;

    public constructor(msg: string[]) {
        super(msg);
        this.tableNumber = this.nextUint32();
        this.tableSeatNumber = this.nextUint16();
        this.totalPotSize = this.nextUint64();
    }
}
